{"meta":{"title":"Matthew Blog","subtitle":"","description":"","author":"Matthew","url":"http://yoursite.com","root":"/"},"pages":[{"title":"Categories","date":"2020-10-08T14:44:26.448Z","updated":"2020-10-08T14:44:26.448Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-10-08T14:55:42.000Z","updated":"2020-10-08T14:55:42.822Z","comments":true,"path":"categories/index-1.html","permalink":"http://yoursite.com/categories/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2020-10-08T15:01:47.000Z","updated":"2020-10-08T15:01:47.354Z","comments":true,"path":"categories/index-2.html","permalink":"http://yoursite.com/categories/index-2.html","excerpt":"","text":""},{"title":"Tags","date":"2020-10-08T14:44:26.449Z","updated":"2020-10-08T14:44:26.449Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2020-10-08T14:44:26.446Z","updated":"2020-10-08T14:44:26.446Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"MySQL 小技巧","slug":"mysql-tips","date":"2020-11-29T15:27:45.000Z","updated":"2020-11-29T15:40:46.219Z","comments":true,"path":"2020/11/29/mysql-tips/","link":"","permalink":"http://yoursite.com/2020/11/29/mysql-tips/","excerpt":"接下来一段时间, 会将主要精力投入在SQL优化 以及工作中常用的一些SQL小技巧总结。当然啦, 也会对Hive、Spark SQL 和 Presto 中的SQL使用做一些总结。之前SQL写得比较少, 更多的是用的pyspark进行大数据处理, 后端服务更多的用Mybatis自动生成工具来生成DAO层SQL代码,然后在Service层进行多次调用, 一是因为业务逻辑不复杂, 二是因为性能要求也没那么高。不过, 总感觉SQL这块如果不掌握的话, 可能后面发展会受限。好了, 废话不多说, 我们开始一段时间的 SQL 之旅吧。","text":"接下来一段时间, 会将主要精力投入在SQL优化 以及工作中常用的一些SQL小技巧总结。当然啦, 也会对Hive、Spark SQL 和 Presto 中的SQL使用做一些总结。之前SQL写得比较少, 更多的是用的pyspark进行大数据处理, 后端服务更多的用Mybatis自动生成工具来生成DAO层SQL代码,然后在Service层进行多次调用, 一是因为业务逻辑不复杂, 二是因为性能要求也没那么高。不过, 总感觉SQL这块如果不掌握的话, 可能后面发展会受限。好了, 废话不多说, 我们开始一段时间的 SQL 之旅吧。 实验数据表1. user: 表2. job: 表3. sports_duration: 1. 如何在MySQL中使用full join?场景: 将上面的user 表和 job表 合成一张大表。 full join 就是取两者的并集, 而MySQL中是不能使用full join 的, 下面来说下解决方法:使用表user left join 表job, 然后 union all 表user right join 表job(其实也就是表job left join 表user)即可, union all 就是两者的并集。 sql 如下: 123select u.name, u.age, u.hobby, j.name as jname, j.job from user u left JOIN job j on u.`name` = j.nameUNION allselect u.name, u.age, u.hobby, j.name as jname, j.job from user u right JOIN job j on u.`name` = j.name; 结果如下： 通过上图, 我们也可以很清楚的看到 left join 和 right join 后的效果。user left join job 就是user 表作为主表, 将 job 表中与 user表有关联关系的数据作为补充, 详见 上图 left join 红框。另外, 通过指定 where jname is null, 我们也可以取到 user 表中有而 job 表中不存在的用户。right join 同理, 这里就不赘述了。 2. 如何更新使用过滤条件中包括自身的表？场景: 把同时存在于 user表 和 job表的记录的用户在user 表中的age 字段更新为30。错误示例： 1update user set age=30 where user.name in (select j.name from user u join job j on u.name=j.name); 报错： 12update user set age&#x3D;30 where user.name in (select j.name from user u join job j on u.name&#x3D;j.name)&gt; 1093 - You can&#39;t specify target table &#39;user&#39; for update in FROM clause 说明： MySQL 中不支持这样操作, 在 SQLServer 或者 Oracle中可以正常执行。 正确解法: 1update user u join (select j.name from user u join job j on u.name=j.name) j on a.name=j.name set u.age=30; 更新结果如下: 3. 如何使用 join 来优化子查询?先看下面这个带有子查询的sql: 1select u.name, u.age, u.hobby, (select job from job where job.name = u.name ) as job from user u; 使用 join 优化: 1select u.name, u.age, u.hobby, job from user u left join job j on u.`name` = j.`name`; 4. 使用join来优化聚合子查询场景: 找出user 表中三人, 各自运动时长最长的日期。新增表 sports_duration, duration 为运动时长, 单位: 分钟 聚合子查询: 12345select u.name, s.day, s.duration from user u join sports_duration s on u.name=s.name where s.duration=( select max(c.duration) from sports_duration c where c.name=s.name) 结果如下: 使用join优化后, 避免子查询: 12345select u.name, s.day, s.duration from user u join sports_duration s on u.name=s.namejoin sports_duration c on c.name=s.name group by u.name,s.day,s.durationhaving s.duration=max(c.duration); 返回的结果集是相同的。 5. 如何实现分组选择?在 Oracle、SQLServer、PgSQL中可以使用分区查询函数实现: 12345with tmp as ( select u.name, s.day, s.duration, row_number() over(partition by u.name order by s.duration) cnt from user u join sports_duration s on u.name = s.name) select * from tmp where cnt &lt;= 2; 但是, 在 MySQL中不支持。 我们可以这样做: 12345select u.name, d.day, d.duration from ( select name, day, duration, (select count(*) from sports_duration s where s.name=c.name and c.duration &lt;= s.duration) as cnt from sports_duration c group by name, day, duration) d join user u on d.name = u.namewhere cnt &lt;= 2; 结果如下: 下面我们来拆分这个SQL: 1234select u.name, d.day, d.duration, cnt from ( select name, day, duration, (select count(*) from sports_duration s where s.name=c.name and c.duration &lt;= s.duration) as cnt from sports_duration c group by name, day, duration) d join user u on d.name = u.name; 去掉 where条件, 加上返回 cnt 字段, 就可以很清晰的看到明白这个sql的逻辑了, 结果如下图:利用子查询中统计出用户运动耗时大于等于当前运动记录的条数, 然后再进行过滤。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}]},{"title":"正则表达式学习","slug":"正则表达式学习","date":"2020-10-03T14:31:45.000Z","updated":"2020-10-08T15:56:29.334Z","comments":true,"path":"2020/10/03/正则表达式学习/","link":"","permalink":"http://yoursite.com/2020/10/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/","excerpt":"table th:nth-of-type(1){ width: 17%; } table th:nth-of-type(2){ width: 83%; } 正则示例 正则表达式 描述 this is text 匹配字符串 “this is text” this\\s+is\\s+text 注意字符串中的 \\s+。匹配单词 “this” 后面的 \\s+ 可以匹配多个空格，之后匹配 is 字符串，再之后 \\s+ 匹配多个空格然后再跟上 text 字符串。可以匹配这个实例：this is text ^\\d+(.\\d+)? ^ 定义了以什么开始; \\d+ 匹配一个或多个数字; ? 设置括号内的选项是可选的; . 匹配 “.”; 可以匹配的实例：”5”, “1.5” 和 “2.21”。","text":"table th:nth-of-type(1){ width: 17%; } table th:nth-of-type(2){ width: 83%; } 正则示例 正则表达式 描述 this is text 匹配字符串 “this is text” this\\s+is\\s+text 注意字符串中的 \\s+。匹配单词 “this” 后面的 \\s+ 可以匹配多个空格，之后匹配 is 字符串，再之后 \\s+ 匹配多个空格然后再跟上 text 字符串。可以匹配这个实例：this is text ^\\d+(.\\d+)? ^ 定义了以什么开始; \\d+ 匹配一个或多个数字; ? 设置括号内的选项是可选的; . 匹配 “.”; 可以匹配的实例：”5”, “1.5” 和 “2.21”。 java中的正则java.util.regex 包主要包括以下三个类： Pattern 类：Pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。 Matcher 类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。 matches() 尝试将整个字符串序列与该模式匹配 find() 该方法扫码输入的序列, 查找与该模式匹配的下一个子序列12345678910Pattern PATTERN &#x3D; Pattern.compile(&quot;\\\\d+ \\\\w+&quot;);Matcher matcher &#x3D; PATTERN.matcher(&quot;1 apple&quot;);boolean find &#x3D; matcher.find();System.out.println(&quot;find:&quot; + find);boolean find1 &#x3D; matcher.find();System.out.println(&quot;find1:&quot; + find1);&#x2F;&#x2F; outputfind:truefind1:false group() 捕获组取值, 一般与find() 一起用 group(num) 捕获组取值, 一般与matches() 一起用 PatternSyntaxException：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。 一般是两种用途: 判断字符串中是否包含某个子串; 提取某个字符串中符合正则规则的内容 注: 正则中的 \\ 在Java中需要使用 \\\\ 正则表达式-匹配字符(集合) 匹配普通字符:字母、数字、汉字、下划线, 以及没有特殊定义的标点符号 匹配转义字符 字符 说明 \\n 代表换行符 \\t 制表符 \\、^、$、(、)、{、}、?、+、*、\\、|、[、] 代表字符本身(就是在正则表达式中有特殊作用的字符需要做转义处理) 标准字符集合 字符 说明 \\d 数字字符匹配。等效于 [0-9] \\w 匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效 \\W 与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效 \\s 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效 \\S 匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效 . 匹配除”\\r\\n”之外的任何单个字符。若要匹配包括”\\r\\n”在内的任意字符，请使用诸如”[\\s\\S]”之类的模式 自定义字符集合[] 方括号匹配方式, 能够匹配方括号中的任意一个字符。 字符集合 说明 [ab5@] 匹配 a 或 b 或 5 或 @ [^abc] 匹配 a、 b、 c之外的任意一个字符 [a-z] 匹配 a~z 之间的任意一个字符 [^A-F0-3] 匹配 AF, 03 之外的任意一个字符 注意: 正则表达式的特殊符号, 被包含到中括号中, 则失去特殊意义, 除了 ^ 和 - 之外 标准字符集合, 除小数点外, 如果被包含于中括号中, 自定义字符集合将包含该集合, 比如: [\\d.-+] 将匹配: 数字 或 小数点 或 + 或 - 量词 修饰匹配次数的特殊符号。 字符 说明 {n} n 是非负整数。正好匹配 n 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。 {n,} n 是非负整数。至少匹配 n 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。 {n,m} m 和 n 是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。 ? 匹配表达式0次或1次, 相当于 {0,1} + 表达式至少出现一次, 相当于 {1,} * 表达式不出现或者出现任意次, 相当于{0,} 注: {0,1} 中逗号左边必须有, 不能有 {,6} 这种形式 匹配规则默认为贪婪模式, 即匹配字符越多越好 匹配次数中的非贪婪模式(匹配字符越少越好, 修饰匹配次数的特殊符合后再加一个 ?) 字符边界 匹配符合某种条件的位置 字符 说明 ^ 字符串开始的地方进行匹配([]外) $ 字符串结束的地方进行匹配 \\b 匹配一个单次边界，即前面或后面的字符至少有一个是[A-Za-z0-9_]以外的字符 ^A 多行模式下, 匹配第一个出现的字符 ^Z 多行模式下, 匹配最后一个出现的字符 选择符和分组 字符 作用 | 或 () 匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“ 反向引用 每一对 ()会分配一个编号, 使用 () 的捕获根据左括号的顺序从1开始自动编号 通过反向引用, 可以对已捕获的字符串进行引用","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"},{"name":"正则表达式","slug":"其他/正则表达式","permalink":"http://yoursite.com/categories/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"其他","slug":"其他","permalink":"http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"Azkaban-1.搭建Azkaban源代码阅读环境","slug":"Azkaban-1.搭建Azkaban源代码阅读环境","date":"2020-05-23T08:26:45.000Z","updated":"2020-10-08T15:52:27.640Z","comments":true,"path":"2020/05/23/Azkaban-1.搭建Azkaban源代码阅读环境/","link":"","permalink":"http://yoursite.com/2020/05/23/Azkaban-1.%E6%90%AD%E5%BB%BAAzkaban%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/","excerpt":"在公司的日常工作中， 经常会用到 Azkaban。作为一种工作流管理系统, 对我来说, 的确有学习的价值。 本文将会使用最新版的Azkaban源代码, 编译并搭建一套可运行调试的系统。开发工具使用的是IDEA, 运行环境是CentOS7。 从github下载源代码截止目前，最新的tag版本是: 3.86.0可以直接点击下载源码: 3.86.0","text":"在公司的日常工作中， 经常会用到 Azkaban。作为一种工作流管理系统, 对我来说, 的确有学习的价值。 本文将会使用最新版的Azkaban源代码, 编译并搭建一套可运行调试的系统。开发工具使用的是IDEA, 运行环境是CentOS7。 从github下载源代码截止目前，最新的tag版本是: 3.86.0可以直接点击下载源码: 3.86.0 编译用IDEA打开, File -&gt; Open… -&gt; 选择已解压的代码目录 -&gt; 点击 OK。此时, IDEA会自动同步一些Gradle项目的配置，稍微等待一会。 为了解决gradle项目下载依赖慢的问题， 我们可以加上阿里云的maven仓库地址。在azkaban根目录下的 build.gradle 中加入下面内容即可: 1maven &#123; url \"http://maven.aliyun.com/nexus/content/groups/public\" &#125; 加入后的效果是这样的: 123456789allprojects &#123; apply plugin: &#39;jacoco&#39; repositories &#123; maven &#123; url &quot;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&quot; &#125; mavenCentral() mavenLocal() &#125;&#125; 注意: 这里需要保留原来的仓库地址, 因为有些依赖阿里云仓库下载不到 再配置一个 npm的淘宝源, 毕竟国外的不太稳定。在用户目录下, 创建 .npmrc 文件: 1vi ~&#x2F;.npmrc 再加入以下内容即可: 1registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F; 配置好之后, 我们就可以执行以下命令编译了: 1./gradlew build -x test 编译成功后, 就有了az-web 和 az-exec 的可运行程序压缩包了。 数据库、表初始化推荐使用 MySQL5.7.x 12345678-- 创建数据库mysql&gt; CREATE DATABASE azkaban;--创建用户, username/password 自定义mysql&gt; CREATE USER 'username'@'%' IDENTIFIED BY 'password';--授权, &lt;username&gt; 改为你自己的用户名 mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE ON azkaban.* to '&lt;username&gt;'@'%' WITH GRANT OPTION; 调整Mysql Packet Size, 找到MySQL的配置文件,修改max_allowed_packet=1024M 123[mysqld]...max_allowed_packet&#x3D;1024M 重启MySQL 1sudo &#x2F;sbin&#x2F;service mysqld restart 使用初始化sql建表: 12# 位置azkaban-3.86.0\\azkaban-db\\build\\sql\\create-all-sql-0.1.0-SNAPSHOT.sql 运行azkaban Exec节点编译后的压缩包路径: azkaban-exec-server/build/distributions/azkaban-exec-server-0.1.0-SNAPSHOT.zip 1.更改配置文件上传 azkaban-exec-server-0.1.0-SNAPSHOT.zip 到 centos 服务器上，解压。修改 azkaban-exec-server/conf/azkaban.properties 配置文件: 123456789101112131415# 数据库信息mysql.port=3306mysql.host=192.168.3.25mysql.database=azkabanmysql.user=rootmysql.password=123456# 执行节点信息executor.port=12321azkaban.use.multiple.executors=trueazkaban.executorselector.filters=StaticRemainingFlowSize,MinimumFreeMemory,CpuStatusazkaban.executorselector.comparator.NumberOfAssignedFlowComparator=1azkaban.executorselector.comparator.Memory=1azkaban.executorselector.comparator.LastDispatched=1azkaban.executorselector.comparator.CpuUsage=1 2.设置远程debug2.1 编辑文件 azkaban-exec-server/bin/internal/internal-start-executor.sh， 增加一个 AZKABAN_OPTS 值 123......AZKABAN_OPTS=\"$AZKABAN_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5554\"java $AZKABAN_OPTS $JAVA_LIB_PATH -cp $CLASSPATH azkaban.execapp.AzkabanExecutorServer -conf $conf $@ &amp; 2.2 IDEA中配置点击编辑运行时配置 -&gt; 点击左上角的 + ，选择 Remote 选项。配置如下图:说明: Host: 为az执行节点的IP Port: 为 上面我们配置的那个远程debug端口 Use module classpath: 为az-exec模块的main 点击OK即可, 需要远程服务先启动,才能进行远程debug操作。 3.运行并激活az-exec运行: 12cd azkaban-exec-serverbin/start-exec.sh 激活: 1curl -G &quot;http:&#x2F;&#x2F;192.168.3.25:12321&#x2F;executor?action&#x3D;activate&quot; &amp;&amp; echo 192.168.3.25:12321 为 az执行节点的地址 此时, 可以发现azkaban库 executors 表中已经有执行节点的记录 运行azkaban Web节点编译后的压缩包路径:azkaban-web-server/build/distributions/azkaban-web-server-0.1.0-SNAPSHOT.zip 1.更改配置文件上传 azkaban-web-server-0.1.0-SNAPSHOT.zip 到 centos 服务器上，解压。修改 azkaban-web-server/conf/azkaban.properties 配置文件: 123456# 数据库信息mysql.port=3306mysql.host=192.168.3.25mysql.database=azkabanmysql.user=rootmysql.password=123456 2.设置远程debug2.1 编辑文件 azkaban-web-server/bin/internal/internal-start-web.sh， 增加一个 AZKABAN_OPTS 值 123......AZKABAN_OPTS=\"$AZKABAN_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5555\"java $AZKABAN_OPTS $JAVA_LIB_PATH -cp $CLASSPATH azkaban.webapp.AzkabanWebServer -conf $conf $@ &amp; 2.2 IDEA中配置点击编辑运行时配置 -&gt; 点击左上角的 + ，选择 Remote 选项。配置如下图: 3.运行az-web 12cd azkaban-web-serverbin/start-web.sh 4.登录Azkaban默认使用的xml来管理用户。配置文件目录: azkaban-web-server/conf/azkaban-users.xml访问 http://192.168.3.25:8081, 使用azkaban/azkaban 即可登录。 192.168.3.25: 为 az-web的ip 8081: 为az-web的端口 远程调试在 az-web 和 az-exec 都启动之后, 先确保所有端口都能正常访问, 我这儿配置的是 az-exec服务端口: 12321 az-exec远程debug端口: 5554 az-web服务端口: 8091 az-web远程debug端口: 5555 然后在IDEA中运行下图中的这两项即可。在想要看细节的地方打上断点, 就可以愉快玩耍啦。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"IDEA","slug":"工具/IDEA","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/IDEA/"}],"tags":[{"name":"Azkaban","slug":"Azkaban","permalink":"http://yoursite.com/tags/Azkaban/"},{"name":"调试","slug":"调试","permalink":"http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"},{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"},{"name":"源码阅读","slug":"源码阅读","permalink":"http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"}]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"},{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"},{"name":"正则表达式","slug":"其他/正则表达式","permalink":"http://yoursite.com/categories/%E5%85%B6%E4%BB%96/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"IDEA","slug":"工具/IDEA","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/IDEA/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"其他","slug":"其他","permalink":"http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"},{"name":"Azkaban","slug":"Azkaban","permalink":"http://yoursite.com/tags/Azkaban/"},{"name":"调试","slug":"调试","permalink":"http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"},{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"},{"name":"源码阅读","slug":"源码阅读","permalink":"http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"}]}